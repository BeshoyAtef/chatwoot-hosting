services:
  base: &base
    image: sendingtk/chatwoot:v3.12.0
    container_name: chatwoot
    hostname: lchatwoot
    env_file: .env 
    stdin_open: true 
    tty: true  
    networks: 
      - evolution-network     
  
  rails:
    <<: *base
    container_name: chatwoot-rails
    hostname: chatwoot-rails
    depends_on:
      - postgres-chatwoot
      - redis-chatwoot
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
    volumes:
      - ./volumes/chatwoot_nestor_storage:/app/storage ## Arquivos de conversa
      - ./volumes/chatwoot_nestor_public:/app/public ## Arquivos de logos
      - ./volumes/chatwoot_nestor_mailer:/app/app/views/devise/mailer ## Arquivos de email
      - ./volumeschatwoot_nestor_mailers:/app/app/views/mailers ## Arquivos de emails
    networks: 
      - evolution-network
    entrypoint: docker/entrypoints/rails.sh
    command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']

  sidekiq:
    <<: *base
    container_name: chatwoot-sidekiq
    hostname: chatwoot-sidekiq
    depends_on:
      - postgres-chatwoot
      - redis-chatwoot
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
    volumes:
      - ./volumes/chatwoot_nestor_storage:/app/storage ## Arquivos de conversa
      - ./volumes/chatwoot_nestor_public:/app/public ## Arquivos de logos
      - ./volumes/chatwoot_nestor_mailer:/app/app/views/devise/mailer ## Arquivos de email
      - ./volumeschatwoot_nestor_mailers:/app/app/views/mailers ## Arquivos de emails
    networks: 
      - evolution-network
    restart: unless-stopped
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']

  postgres-chatwoot:
    image: postgres:14
    container_name: postgres-chatwoot
    hostname: postgres-chatwoot
    restart: always
    volumes:
      - ./database/chatwoot/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chatwoot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=chatwoot
    networks: 
      - evolution-network
    
  postgres-evolution:
    image: postgres:14
    container_name: postgres-evolution
    hostname: postgres-evolution
    restart: always
    volumes:
      - ./database/evolution/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=evolution
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=evolution
    networks: 
      - evolution-network
  
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chatwoot-pgadmin4
    hostname: chatwoot-pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "demo@demo.com.br"
      PGADMIN_DEFAULT_PASSWORD: "PgAdmin2021!"
    depends_on:
      - postgres-chatwoot
    networks:
      - evolution-network

  redis-chatwoot:
    image: redis:alpine
    container_name: redis-chatwoot
    hostname: redis-chatwoot
    restart: always
    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\""]
    env_file: .env
    volumes:
      - ./database/chatwoot/redis:/data
    networks: 
      - evolution-network

  redis-evolution:
    image: redis:alpine
    container_name: redis-evolution
    hostname: redis-evolution
    restart: always
    command: [ "redis-server", "--appendonly", "yes", "--port", "6379" ]
    env_file:
      - ./evolution-api/.env
    volumes:
      - ./database/evolution/redis:/data
    networks: 
      - evolution-network
  
  evolution:
    image: atendai/evolution-api:v2.0.10
    container_name: evolution-api
    volumes:
      - ./evolution-api/evolution_instances:/evolution/instances
    networks:
      - evolution-network
    env_file:
      - ./evolution-api/.env


  typebot-db:
    image: postgres:14
    restart: always
    volumes:
      - ./database/typebot/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=typebot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=typebot
  typebot-builder:
    image: baptistearno/typebot-builder:latest
    restart: always
    depends_on:
      - typebot-db
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    env_file: .env
  typebot-viewer:
    image: baptistearno/typebot-viewer:latest
    restart: always
    env_file: .env
  minio:
    image: minio/minio
    command: server /data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minioPassWord
    volumes:
      - ./volumes/s3:/data
  # This service just makes sure a bucket with the right policies is created
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add minio http://minio:9000 minio minioPassWord;
      /usr/bin/mc mb minio/typebot;
      /usr/bin/mc anonymous set public minio/typebot/public;
      exit 0;
      "

  nginx:
    build: 
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    entrypoint: nginx -g "daemon off;"
    ports:
      - "8080:8080" #Evolution
      - "8081:8081" #Chatwoot
      - "8082:8082" #pgadmin
      - "8083:8083" #typebot build
      - "8084:8084" #typebot view
      - "8085:8085" #minio
    networks: 
      - evolution-network
    depends_on:
      - evolution

networks: 
  evolution-network:
    name: evolution-network
    driver: bridge
